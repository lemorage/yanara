import asyncio
import signal

from letta import ChatMemory, EmbeddingConfig, LLMConfig
from letta.prompts import gpt_system
from letta.schemas.llm_config import LLMConfig
from letta.schemas.tool_rule import TerminalToolRule

from yanara.api.wechat_api.__main__ import monitor_wechat_messages, stop_loop
from yanara.api.wechat_api.wechat_message_manager import WeChatMessageManager
from yanara.globals import client
from yanara.util.decorators import entry

YANARA_PERSONA = "You are a helpful assistant that loves emojis, which serves as a general assistant to handle all the questions around our hotel called 'Oyasumi Ice & Hotel'. Our hotel is based on Osaka, Japan. You should always respond to guests with a kind and enthuastic tone."


def create_yanara() -> str:
    agent_state = client.create_agent(
        # agent's name (unique per-user, autogenerated if not provided)
        name="yanara",
        # in-context memory representation with human/persona blocks
        memory=ChatMemory(
            human="Name: Tammy",
            persona=YANARA_PERSONA,
        ),
        # system instructions for the agent (defaults to `memgpt_chat`)
        system=gpt_system.get_system_text("memgpt_chat"),
        # whether to include base letta tools (default: True)
        include_base_tools=True,
        # list of additional tools (by name) to add to the agent
        tools=[],
    )
    print(f"Created agent with name {agent_state.name} and unique ID {agent_state.id}")
    return agent_state.id


@entry
def main():
    agent_id = create_yanara()
    if client.agent_exists(agent_name="yanara"):
        print("Agent 'yanara' already exists. Skipping agent creation.")
        agent_id = client.get_agent_by_name("yanara").id
    else:
        agent_id = create_yanara()

    from yanara.tools.lark.monthly_revenue import get_monthly_revenue_statistics
    from yanara.tools.lark.room_lookup import lookup_room_availability_by_date
    from yanara.tools.lark.staging_order import create_a_staging_order_for_booking_a_room
    from yanara.tools.lark.weekly_report import get_weekly_report_statistics, weekly_report_typesetting_print
    from yanara.tools.weather import get_weather_forecast_by_location

    tools = [
        lookup_room_availability_by_date,
        create_a_staging_order_for_booking_a_room,
        get_weekly_report_statistics,
        get_monthly_revenue_statistics,
        get_weather_forecast_by_location,
        weekly_report_typesetting_print,
    ]

    for tool_function in tools:
        tool = client.create_tool(tool_function)
        client.add_tool_to_agent(agent_id=agent_id, tool_id=tool.id)

    for agent in client.list_agents():
        print("name: ", agent.name, "id: ", agent.id)

    stop_flag = asyncio.Event()

    # Register the signal handler
    signal.signal(signal.SIGINT, lambda s, f: stop_loop(s, f, stop_flag))
    signal.signal(signal.SIGTERM, lambda s, f: stop_loop(s, f, stop_flag))

    asyncio.run(monitor_wechat_messages(agent_id, stop_flag))
